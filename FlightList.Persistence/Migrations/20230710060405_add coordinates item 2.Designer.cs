// <auto-generated />
using FlightList.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightList.Persistence.Migrations
{
    [DbContext(typeof(FlightDbContext))]
    [Migration("20230710060405_add coordinates item 2")]
    partial class addcoordinatesitem2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlightList.Domain.Airport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CoordinatesId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CoordinatesId")
                        .IsUnique();

                    b.ToTable("Airports", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cdacc6b2-2b7d-43b6-a93d-1d2ed6530ca9",
                            Code = "CMN",
                            CoordinatesId = "5e6c365b-79d7-4324-a614-2cd3b97bb7fd",
                            Name = "Aéroport Mohammed V de Casablanca"
                        },
                        new
                        {
                            Id = "ec604f42-8e8f-43a6-be23-f6cb91c15090",
                            Code = "RAK",
                            CoordinatesId = "6b20a79e-5092-41b7-b107-9abf8df9bf9f",
                            Name = "Aéroport Marrakech-Ménara"
                        },
                        new
                        {
                            Id = "7b0be66b-b6db-425e-9bee-96c5b7126301",
                            Code = "AGA",
                            CoordinatesId = "f1db0bb6-7991-43b6-bec7-2d597a3214bc",
                            Name = "Aéroport Agadir-Al Massira"
                        },
                        new
                        {
                            Id = "a2703280-4fd4-4edc-81dc-b5f8801e833f",
                            Code = "FEZ",
                            CoordinatesId = "59ee9bf9-83dc-49ef-9251-d31aea754a87",
                            Name = "Aéroport Fès-Saïss"
                        },
                        new
                        {
                            Id = "5c531852-3334-425b-96c7-b35404a95895",
                            Code = "RBA",
                            CoordinatesId = "9aa05341-bbd9-4514-b0a9-4c77b9048352",
                            Name = "Aéroport Rabat-Salé"
                        },
                        new
                        {
                            Id = "7822d982-25ff-423b-8418-41cd6da170fe",
                            Code = "TNG",
                            CoordinatesId = "958e968e-c391-4b8a-abf2-f15bcb32dcef",
                            Name = "Aéroport Tangier Ibn Battuta"
                        });
                });

            modelBuilder.Entity("FlightList.Domain.Coordinates", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Coordinates", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5e6c365b-79d7-4324-a614-2cd3b97bb7fd",
                            Latitude = 33.3675,
                            Longitude = -7.5899720000000004
                        },
                        new
                        {
                            Id = "6b20a79e-5092-41b7-b107-9abf8df9bf9f",
                            Latitude = 31.6069,
                            Longitude = -8.0363000000000007
                        },
                        new
                        {
                            Id = "f1db0bb6-7991-43b6-bec7-2d597a3214bc",
                            Latitude = 30.324999999999999,
                            Longitude = -9.4131
                        },
                        new
                        {
                            Id = "59ee9bf9-83dc-49ef-9251-d31aea754a87",
                            Latitude = 33.927300000000002,
                            Longitude = -4.9786000000000001
                        },
                        new
                        {
                            Id = "9aa05341-bbd9-4514-b0a9-4c77b9048352",
                            Latitude = 34.051400000000001,
                            Longitude = -6.7518000000000002
                        },
                        new
                        {
                            Id = "958e968e-c391-4b8a-abf2-f15bcb32dcef",
                            Latitude = 35.726900000000001,
                            Longitude = -5.9196999999999997
                        },
                        new
                        {
                            Id = "20a6097c-d79a-40ad-b018-58b0951e7dd0",
                            Latitude = 40.726900000000001,
                            Longitude = -6.9196999999999997
                        },
                        new
                        {
                            Id = "85ab417f-3ccd-499b-9341-0957f907a017",
                            Latitude = 99.726900000000001,
                            Longitude = -99.919700000000006
                        });
                });

            modelBuilder.Entity("FlightList.Domain.Flight", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArrivalAirportId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DepartureAirportId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalAirportId");

                    b.HasIndex("DepartureAirportId");

                    b.ToTable("Flights", (string)null);
                });

            modelBuilder.Entity("FlightList.Domain.Airport", b =>
                {
                    b.HasOne("FlightList.Domain.Coordinates", "Coordinates")
                        .WithOne("Airport")
                        .HasForeignKey("FlightList.Domain.Airport", "CoordinatesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coordinates");
                });

            modelBuilder.Entity("FlightList.Domain.Flight", b =>
                {
                    b.HasOne("FlightList.Domain.Airport", "ArrivalAirport")
                        .WithMany("ArrivalAirportFlights")
                        .HasForeignKey("ArrivalAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlightList.Domain.Airport", "DepartureAirport")
                        .WithMany("DepartureAirportFlights")
                        .HasForeignKey("DepartureAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArrivalAirport");

                    b.Navigation("DepartureAirport");
                });

            modelBuilder.Entity("FlightList.Domain.Airport", b =>
                {
                    b.Navigation("ArrivalAirportFlights");

                    b.Navigation("DepartureAirportFlights");
                });

            modelBuilder.Entity("FlightList.Domain.Coordinates", b =>
                {
                    b.Navigation("Airport");
                });
#pragma warning restore 612, 618
        }
    }
}
